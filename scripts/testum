#!/bin/bash
# file: ./testum
set -e

if ! [[ "$1" =~ ^(stop|start|restart|init|clean|purge|mine|update-enodes)$ ]]; then
  echo
  echo "Usage: testum [stop|start|restart|init|clean|purge|mine|update-enodes [0|1|2|3]]"
  echo
  echo "Manage [node(s) on] the private ethereum network (for root/sudoer)"
  echo "ex.:"
  echo " # Create (re-create) a network:"
  echo "   testum init; testum update-enodes; testum restart"
  echo " # Start mining on node 3"
  echo "   testum mine 3"
  echo " # Stop node 1 and 2"
  echo "   testnum stop \"1 2\""
  echo
  exit
fi;

cmd=$1
shift

[ -z "$*" ] && nodes="$(seq 0 3)" || nodes="$*"

echo "[*] command: ${cmd}"
echo "[*] nodes:   ${nodes}"

# Update with your destination folders
VOLUMES='/var/docker-volumes/vol1';
TMPFILE="/tmp/geth.static-nodes.tmp"

function create_genesis {
  cat > $1 << EOBlock
{
  "config": {
        "chainId": 0,
        "homesteadBlock": 0,
        "eip155Block": 0,
        "eip158Block": 0
    },
  "alloc"      : {
    "0xbf3bedb9ab1ec515c5677498db9b91f6c2bda9a3": {"balance": "10000000000000000000000000"},
    "0xc9e262a39562cbee76fab4407fd81fa9a7111e9e": {"balance": "10000000000000000000000000"},
    "0xa391fea4cd77de8c62661a80e472339c61f5e8ae": {"balance": "10000000000000000000000000"},
    "0xdde2d3ec82314b81159504ec9011284da0ad4873": {"balance": "10000000000000000000000000"}
   },
  "coinbase"   : "0xbf3bedb9ab1ec515c5677498db9b91f6c2bda9a3",
  "difficulty" : "0x20000",
  "extraData"  : "",
  "gasLimit"   : "0x3d0900",
  "nonce"      : "0xdddbe45602e88ee7",
  "mixhash"    : "0x0000000000000000000000000000000000000000000000000000000000000000",
  "parentHash" : "0x0000000000000000000000000000000000000000000000000000000000000000",
  "timestamp"  : "0x00"
}
EOBlock
}

rm -f ${TMPFILE}

for i in ${nodes}; do

  if [[ "${cmd}" =~ ^(restart|init|stop|clean|purge)$ ]]; then
    echo "[*] node ${i}: stoping and cleaning pipe ..."

    set +e; docker stop e${i} > /dev/null 2>&1; set -e;
    rm -f ${VOLUMES}/host${i}/root/.ethereum/geth.ipc
  fi;

  if [[ "${cmd}" =~ ^(restart|init|clean)$ ]]; then
    echo "[*] node ${i}: removing image ..."

    cnt=$(docker ps -aq --filter name=e${i});
    [ ! -z ${cnt} ] && docker rm ${cnt};
  fi;

  if [[ "${cmd}" =~ ^(init|purge)$ ]]; then
    echo "[*] node ${i}: deleting DBase and cache ..."

    rm --force --recursive ${VOLUMES}/host${i}/root/.ethereum/geth
    rm --force --recursive ${VOLUMES}/host${i}/root/.ethash
  fi;

  if [[ "${cmd}" =~ ^(init)$ ]]; then
    echo "[*] node ${i}: DBase re-initialization ..."

    create_genesis ${VOLUMES}/host${i}/root/.ethereum/genesis.json

    docker run --name e${i} -v ${VOLUMES}/host${i}/root/:/root/ \
      ethereum/client-go init /root/.ethereum/genesis.json
    cnt=$(docker ps -aq --filter name=e${i});
    [ ! -z ${cnt} ] && docker rm ${cnt};
  fi;

  if [[ "${cmd}" =~ ^(start|restart)$ ]]; then
    echo "[*] node ${i}: starting ..."

    rpcport=$((8545+${i}));
    discport=3031${i};
    # ? --verbosity 4 --nodiscover --rpccorsdomain --network=2023
    docker run --name e${i} -v ${VOLUMES}/host${i}/root/:/root/ \
      -dt -p 127.0.0.1:${rpcport}:8545 --expose ${discport} \
      ethereum/client-go --identity=e${i} --datadir=/root/.ethereum/ \
        --verbosity=4 --maxpeers=3 --port ${discport} --nodiscover \
        --rpc --rpcaddr 0.0.0.0 --rpcport 8545 --rpccorsdomain "*" \
        --rpcapi=db,eth,net,web3,personal,shh \
        console
     sleep 5;
  fi;

  if [[ "${cmd}" =~ ^(update-enodes)$ ]]; then
    echo "[*] node ${i}: obtaining enode..."

    ipaddr=$(docker container inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' e${i})
    enode=$(docker exec -it e${i} geth attach --exec admin.nodeInfo.enode)
    enode=${enode/\[::\]/${ipaddr}}
    if [ ! -z ${enode} ]; then
      [ -f ${TMPFILE} ] && echo ',' >> ${TMPFILE} || echo '[' >> ${TMPFILE};
      # remove xterm control symbols while writing into file
      echo -n ${enode} | sed -e "s/\x0d//" -e "s/\x1b\[.\{1,5\}m//g" >> ${TMPFILE}
    fi;
  fi;

  if [[ "${cmd}" =~ ^(mine)$ ]]; then
    echo "[*] node ${i}: starting mining..."
    docker exec -it e${i} geth attach --exec \
      "miner.stop(); web3.miner.setEtherbase(eth.accounts[${i}]); miner.start(); eth.mining;"
  fi;

done;

if [ -f ${TMPFILE} ]; then
  echo >> ${TMPFILE}
  echo ']' >> ${TMPFILE}
  for i in ${nodes}; do
    echo "[*] node ${i}: generating static-nodes.json"

    nodesFile=${VOLUMES}/host${i}/root/.ethereum/geth/static-nodes.json
    cp -f ${TMPFILE} ${nodesFile}
  done;
fi;

echo "[*] done. running containers:"
docker ps -q
